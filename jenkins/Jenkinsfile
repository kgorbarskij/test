#!groovy
// Run docker build
properties([disableConcurrentBuilds()])

pipeline {
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            some-label: some-label-value
        spec:
          containers:
          - name: dind  
            image: docker:latest
            volumeMounts:
            - name: dockersock
              mountPath: "/var/run/docker.sock"
            command:
            - cat
            tty: true
          volumes:
          - name: dockersock
            hostPath:
              path: /var/run/docker.sock 
        '''
    }
  }
    stages {
        stage("docker login") {
            steps {
                container('dind') {
                    echo " ============== docker build =================="
                    dir ('app'){
                        withCredentials([usernamePassword(credentialsId: 'kgorbarskij_dhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            sh """
                            ls -la
                            docker login -u $USERNAME -p $PASSWORD
                            docker build -t kgorbarskij/2048:latest .
                            docker push kgorbarskij/2048:latest
                            """
                        }    
                    }
                }    
            }
        }
        // stage("create docker image") {
        //     steps {
        //         container('dind') {
        //             echo " ============== start building image =================="
        //             dir ('app') {
        //                 sh 'docker build -t kgorbarskij/2048:latest . '
        //             }
        //         }
        //     }
        // }
        // stage("docker push") {
        //     steps {
        //         container('dind') {
        //             echo " ============== start pushing image =================="
        //             sh '''
        //             docker push kgorbarskij/2048:latest
        //             '''
        //         }
        //     }
        // }
    }
}